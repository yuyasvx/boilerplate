/** BCP 47 language tag. */ /* eslint-disable @typescript-eslint/no-explicit-any */
declare namespace Accelerometer {
  class Accelerometer {
    /**
     * Flag that indicates if the sensor is activated or not. When a sensor is created, the sensor is not activated, thus the initial value of this property equals false.
     */
    readonly activated: boolean
    /** Event handler that is called when the sensor is activated. */
    onactivate: ((this: Sensor.Sensor, event: Event) => any) | undefined
    /** ((this: Sensor, event: SensorErrorEvent) => any) or undefined */
    onerror: ((this: Sensor.Sensor, event: Sensor.SensorErrorEvent) => any) | undefined
    /** ((this: Sensor, event: Event) => any) or undefined */
    onreading: ((this: Sensor.Sensor, event: Event) => any) | undefined

    /** @since 2.0 */
    readonly readings: BatchedAccelerometerReading | undefined
  }

  interface BatchedAccelerometerReading {
    readonly timestamp: Float32Array
    readonly x: Float32Array
    readonly y: Float32Array
    readonly z: Float32Array
  }

  interface AccelerometerReading {
    /**
     * Timestamp of the reading in milliseconds.
     *
     * NOTE: this is relative to an unspecified arbitrary 0 time, or null if no reading is available (when the sensor is not yet activated and there are no valid cached values that can be used).
     * */
    readonly timestamp: number | null
    /** Acceleration along the x axis in m/s^2 */
    readonly x: number | null

    /** Acceleration along the y axis in m/s^2 */
    readonly y: number | null

    /** Acceleration along the z axis in m/s^2 */
    readonly z: number | null
  }
}

declare namespace Appbit {
  /** The Appbit API provides properties and methods which relate directly to the application running on the device. */
  export interface Appbit {
    /**
     * Whether the app should time out after a period of inactivity. The default is true after an application is launched.
     *
     * The value true means that the application will be killed after 2 minutes of inactivity, and false means that the application will not be killed due to inactivity, and may run indefinitely.
     *
     * NOTE: the duration of the timeout is managed by the system and is not configurable using this API.
     * @since New in SDK 2.0
     */
    appTimeoutEnabled: boolean

    /** Application identifier under which the current application is running. */
    readonly applicationId: string

    /** Application build identifier under which the current application is running. */
    readonly buildId: string

    /**
     * Launch arguments passed to the app when launched.
     * @since New in SDK 3.0
     */
    readonly launchArguments: any

    /**
     * Event listener for the unload event. The app will unload after all event listeners have been executed.
     * Blocking the execution for too long will result in sudden termination of the application. Behavior of asynchronous API calls from the listener is undefined.
     */
    onunload: ((this: Appbit, event: Event) => any) | undefined

    /** Permissions that have been granted or denied to the application. */
    readonly permissions: Permissions.Permissions

    /**
     * Request to exit the application. This is an asynchronous request to exit.
     *
     * The application will be unloaded after the current event loop iteration finishes. The unload event will be emitted before the application is unloaded.
     */
    exit(): void
  }

  export const me: Appbit
}

declare namespace Barometer {
  /**
   * A Barometer sensor measures atmospheric pressure.
   *
   * Atmospheric pressure varies with elevation, so a barometer can be used to simulate an altimeter.
   *
   * Read the Barometer Sensor Guide for further information. The Barometer API provides access to the atmospheric pressure data measured by the hardware sensor.
   *
   * @see https://dev.fitbit.com/build/guides/sensors/barometer/
   */
  class Barometer {
    /** Flag that indicates if the sensor is activated or not. When a sensor is created, the sensor is not activated, thus the initial value of this property equals false. */
    readonly activated: boolean

    /** Event handler that is called when the sensor is activated. */
    onactivate: ((this: Sensor.Sensor, event: Event) => any) | undefined

    /** Event handler that is called when an error occurs. When an error occurs, the sensor is automatically stopped, and the activated property equals false. */
    onerror: ((this: Sensor.Sensor, event: Sensor.SensorErrorEvent) => any) | undefined

    /** Event handler that is called whenever a new reading is available. */
    onreading: ((this: Sensor.Sensor, event: Event) => any) | undefined

    /** @since New in SDK 2.0 */
    readonly readings: BatchedBarometerReading | undefined
  }

  interface BatchedBarometerReading {
    /** @since New in SDK 2.0 */
    readonly pressure: Float32Array

    readonly timestamp: Float32Array
  }
}

declare namespace BodyPresence {
  /**
   * The BodyPresenceSensor API is used to determine whether the device is on the user's wrist or not. Note, unlike other sensors, the body presence sensor does not allow a developer to set its frequency.
   * @since New in SDK 2.0
   */
  class BodyPresenceSensor {
    /** Flag that indicates if the sensor is activated or not. When a sensor is created, the sensor is not activated, thus the initial value of this property equals false. */
    readonly activated: boolean

    /** Event handler that is called when the sensor is activated. */
    onactivate: ((this: Sensor.Sensor, event: Event) => any) | undefined

    /** Event handler that is called when an error occurs. When an error occurs, the sensor is automatically stopped, and the activated property equals false. */
    onerror: ((this: Sensor.Sensor, event: Sensor.SensorErrorEvent) => any) | undefined

    /** Event handler that is called whenever a new reading is available. */
    onreading: ((this: Sensor.Sensor, event: Event) => any) | undefined

    /** Indicates whether a users body is present, or not. */
    readonly present: boolean
  }
}

declare namespace CBOR {
  /** Decode a CBOR-encoded buffer to a value. */
  function decode<DecodedType>(cbor: ArrayBuffer | ArrayBufferView): DecodedType

  /**
   * Encode a value (primitive or object) to a CBOR buffer.
   * @see https://dev.fitbit.com/build/reference/device-api/cbor/#encode-
   */
  function encode(value: any): ArrayBuffer | ArrayBufferView

  /** Wrapper for integers that should be encoded as floating point numbers. */
  class Float {
    value: number
  }
}

declare namespace Clock {
  /**
   * The Clock object provides functionality related to the real-time clock of the device, mainly for the purpose of clock face applications.
   *
   * NOTE: Use the standard JavaScript Date API to access the actual clock time.
   */
  interface Clock {
    /**
     * Granularity at which a tick event should be emitted. The possible values are:
     *
     * - "off": do no emit any tick event (default).
     * - "seconds": emit a tick event when the clock's 'second' hand ticks.
     * - "minutes": emit a tick event when the clock's 'minute' hand ticks.
     * - "hours": emit a tick event when the clock's 'hour' hand ticks.
     */
    granularity: 'off' | 'seconds' | 'minutes' | 'hours'

    /** Event handler for the tick event emitted by the clock. */
    ontick: ((this: Clock, event: TickEvent) => any) | undefined
  }

  /** Event that is emitted by the Clock object. */
  interface TickEvent {
    // Properties
    /**
     * The current time when the event was emitted.
     *
     * The values returned by date.getMilliseconds(), date.getSeconds(), date.getMinutes() and date.getHours() are consistent with the clock's granularity property:
     * If granularity is "seconds", date.getMilliseconds() returns 0.
     * If granularity is "minutes", date.getSeconds() and date.getMilliseconds() return 0.
     * If granularity is "hours", date.getMinutes(), date.getSeconds() and date.getMilliseconds() return 0.
     */
    date: Date

    /** Set to true when the default handling was prevented */
    readonly defaultPrevented: boolean

    /** Target of the event */
    readonly target: EventTarget | undefined

    /** Type of the event */
    readonly type: string
  }
}

declare namespace Document {
  type EventHandler = (event: Event) => boolean

  type EventName = string

  type ElementState = string

  interface DocumentModule {
    // Properties
    readonly default: DocumentModule
    // Default export

    onactivate: ((this: Element, event: Event) => any) | undefined

    onanimationend: ((this: Element, event: AnimationEvent) => any) | undefined

    onanimationiteration: ((this: Element, event: AnimationEvent) => any) | undefined

    onanimationstart: ((this: Element, event: AnimationEvent) => any) | undefined

    onclick: ((this: Element, event: MouseEvent) => any) | undefined

    oncollapse: ((this: Element, event: Event) => any) | undefined

    ondisable: ((this: Element, event: Event) => any) | undefined

    onenable: ((this: Element, event: Event) => any) | undefined

    onexpand: ((this: Element, event: Event) => any) | undefined

    onhighlight: ((this: Element, event: Event) => any) | undefined

    onkeydown: ((this: Element, event: KeyboardEvent) => any) | undefined

    onkeypress: ((this: Element, event: KeyboardEvent) => any) | undefined

    onkeyup: ((this: Element, event: KeyboardEvent) => any) | undefined

    onlistbackward: ((this: Element, event: ListScrollEvent) => any) | undefined

    onlistforward: ((this: Element, event: ListScrollEvent) => any) | undefined

    onload: ((this: Element, event: LoadEvent) => any) | undefined

    onmousedown: ((this: Element, event: MouseEvent) => any) | undefined

    onmousemove: ((this: Element, event: MouseEvent) => any) | undefined

    onmouseout: ((this: Element, event: MouseEvent) => any) | undefined

    onmouseover: ((this: Element, event: MouseEvent) => any) | undefined

    onmouseup: ((this: Element, event: MouseEvent) => any) | undefined

    onpagescroll: ((this: Element, event: PageScrollEvent) => any) | undefined

    onreload: ((this: Element, event: Event) => any) | undefined

    onselect: ((this: Element, event: Event) => any) | undefined

    onunhighlight: ((this: Element, event: Event) => any) | undefined

    onunload: ((this: Element, event: Event) => any) | undefined

    onunselect: ((this: Element, event: Event) => any) | undefined

    /** Element that is at the root of the element tree. */
    readonly root: Element

    // Methods
    /**
     * for events emitted by this element.
     */
    addEventListener<K extends keyof EventMap>(type: K, listener: (this: Element, event: EventMap[K]) => any): void

    /** for elements of a given type. */
    getEventHandler(elementType: string): EventHandler | null

    /** all elements of a given type. */
    setEventHandler(elementType: string, handler: EventHandler): void
  }

  /** Visual indicator of the current page, typically used with a panoramaview element. (often shown as pagination dots) */
  interface ScrollIndicatorElement {
    // Properties
    /** Number of scroll indicator items displayed. */
    length: number

    /**
     * Indicates whether the children are clipped or not when they overflow the bounds of the container.
     *
     * When set to visible, the content is not clipped. When set to hidden the content is clipped to the borders of the container element. When set to inherit, the parent element's settings are inherited
     */
    overflow: 'inherit' | 'visible' | 'hidden'

    // Methods
    /** Set the current scroll position that should be displayed by the element.
     * NOTE: this may update the value property of this element if the scroll position corresponds to a different page. While the parameters may be set in terms of pixel units, it isn't necessary, as long as all three parameters are expressed in the same arbitrary measurement unit.
     */
    setPosition(position: number, pageSize: number, viewSize: number): void
  }

  interface EventMap {
    // Properties
    activate: Event

    animationend: AnimationEvent

    animationiteration: AnimationEvent

    animationstart: AnimationEvent

    click: MouseEvent

    collapse: Event

    disable: Event

    enable: Event

    expand: Event

    highlight: Event

    keydown: KeyboardEvent

    keypress: KeyboardEvent

    keyup: KeyboardEvent

    listbackward: ListScrollEvent

    listforward: ListScrollEvent

    load: LoadEvent

    mousedown: MouseEvent

    mousemove: MouseEvent

    mouseout: MouseEvent

    mouseover: MouseEvent

    mouseup: MouseEvent

    pagescroll: PageScrollEvent

    reload: LoadEvent

    select: Event

    unhighlight: Event

    unload: Event

    unselect: Event
  }

  /** Event details for list-scrolling-related events. */
  interface ListScrollEvent {
    // Properties
    /** Set to true when the default handling was prevented */
    readonly defaultPrevented: boolean

    /** Index of the first visible item. */
    readonly first: number

    /** Index of the last visible item. */
    readonly last: number

    /** Index of the middle visible item. */
    readonly middle: number

    /** Target of the event */
    readonly target: EventTarget | undefined

    /** Type of the event */
    readonly type: string
  }

  /** Event details for loading-related events. */
  interface LoadEvent {
    // Properties
    /** Set to true when the default handling was prevented */
    readonly defaultPrevented: boolean

    /** The loading phase. */
    readonly phase: 1 | 2

    /** Target of the event */
    readonly target: EventTarget | undefined

    /** Type of the event */
    readonly type: string
  }

  /** Event details for page-scrolling-related events. All three properties are expressed in the same arbitrary measurement unit (which may or may not be pixels). */
  interface PageScrollEvent {
    // Properties
    /** Set to true when the default handling was prevented */
    readonly defaultPrevented: boolean

    /** Size of a page, in an arbitrary measurement unit. */
    readonly pageSize: number

    /** Current scroll position, in an arbitrary measurement unit. */
    readonly position: number

    /** Target of the event */
    readonly target: EventTarget | undefined

    /** Type of the event */
    readonly type: string

    /** Total view size (all pages combined), in an arbitrary measurement unit. */
    readonly viewSize: number
  }

  /** Interface to look for elements in an element tree. */
  interface ElementSearch {
    // Methods
    /**
     * Get an descendant Element by ID. e.g. `<element id="foo" />
     *
     * When called on the document module itself, the entire element tree is searched. When called on an individual element, the element subtree rooted at that element is searched. The first element with the requested ID, if any, is returned.
     *
     * 注意：もともと返り値は T | nullだった
     * @param id
     */
    getElementById(id: string): Element | null

    /**
     * Get descendant Elements by their class name. e.g. `<element class="foo" />`
     *
     * When called on the document module itself, the entire element tree is searched. When called on an individual element, the element subtree rooted at that element is searched.
     *
     * All the elements with the requested class are returned.
     *
     * @param className
     */
    getElementsByClassName(className: string): Element[]

    /**
     * Get descendant Elements by tag name. e.g `<svg>, <image>, <circle>` etc.
     *
     * When called on the document module itself, the entire element tree is searched. When called on an individual element, the element subtree rooted at that element is searched. All the elements with the requested tag are returned.
     *
     * @param tagName
     */
    getElementsByTagName(tagName: string): Element[]

    /**
     * Get descendant Elements by type name. e.g. <element type="foo" />
     *
     * When called on the document module itself, the entire element tree is searched. When called on an individual element, the element subtree rooted at that element All the elements with the requested type are returned.
     *
     * @param typeName
     */
    getElementsByTypeName(typeName: string): Element[]
  }

  interface Style {
    /** Determines if an element is part of the rendering process. When set to inline, the element is rendered. When set to none, the element and its children will not be rendered (but may still receive events). When set to inherit, the element's parent's property is used. */
    display: 'inherit' | 'none' | 'inline'

    /** Color of the interior of a graphical element. In the case of text element, this is the color of the text itself. */
    fill: string

    /** Opacity of the element's interior, between 0.0 (fully transparent) and 1.0 (fully opaque). (values outside the range will be clamped) */
    fillOpacity: number | undefined

    /** Name of the font family to use to render text. When set to inherit, the element's parent's property is used. */
    fontFamily: string

    /** Size of the font to use to render text. */
    fontSize: number | undefined

    /** Weight of the font to use to render text. When set to inherit, the element's parent's property is used. */
    fontWeight: 'inherit' | 'light' | 'regular' | 'bold'

    /** Opacity of the element, between 0.0 (fully transparent) and 1.0 (fully opaque). (values outside the range will be clamped) */
    opacity: number | undefined

    /**
     * Decoration added to the text. When set to inherit, the element's parent's property is used.
     * - none: no decoration is added to the text
     * - underline: an underline is added to the text
     */
    textDecoration: 'inherit' | 'none' | 'underline'

    /** Determines if an element is visible. When set to visible, the element is visible. When set to hidden, the element is not visible, but it is still part of the rendering process, so it is still accounted for in size and alignment calculations. When set to inherit, the parent element's property is used. */
    visibility: 'inherit' | 'visible' | 'hidden'
  }

  interface Styled {
    readonly style: Style
  }

  /** Base interface for all element types. Elements are the fundamental building blocks for the user interface subsystem. Elements represent a combination of appearance and behavior. They are organized as a tree, where an element may have a parent and zero or more children. */
  interface Element extends Styled {
    // Implemented by document.GraphicsElement

    // Properties
    /**
     * Class of the element.
     *
     * NOTE: this property corresponds to the class attribute in the XML declaration.
     */
    readonly class: string

    /** First child element. If the element has no children, the value is null. */
    readonly firstChild: Element | null

    /**
     * Identifier for the element.
     *
     * NOTE: this property corresponds to the id attribute in the XML declaration.
     */
    readonly id: string

    /** Image file name or identifier for this element. Note that the actual element (typically an ImageElement) that handles the setting or getting of this property may be a descendant: if this element isn't an ImageElement, the default behavior, if not overridden, is to look for the first element with id=image within the descendants, and, if found, set its image. */
    image: string

    /**
     * Rendering display order.
     *
     * NOTE: this property corresponds to the layer attribute in the XML declaration.
     */
    layer: number

    /**
     * Generic read/write property used by some elements for different purposes depending on the actual element type. It typically represents one or more modifiers for the element's behavior.
     *
     * When getting this property, the value returned is always an integer. When setting this property, the value set may be an integer (when setting a simple value) or a two-element array where the first array element is an integer for the value and the second array element is an integer that may be used as a flags/modifier indicator for specialized purposes by some components (transition animation flags for example).
     */
    mode: number

    /** Next sibling element. If the element has no next sibling, the value is null.  */
    readonly nextSibling: Element | null

    onactivate: ((this: Element, event: Event) => any) | undefined

    onanimationend: ((this: Element, event: AnimationEvent) => any) | undefined

    onanimationiteration: ((this: Element, event: AnimationEvent) => any) | undefined

    onanimationstart: ((this: Element, event: AnimationEvent) => any) | undefined

    onclick: ((this: Element, event: MouseEvent) => any) | undefined

    oncollapse: ((this: Element, event: Event) => any) | undefined

    ondisable: ((this: Element, event: Event) => any) | undefined

    onenable: ((this: Element, event: Event) => any) | undefined

    onexpand: ((this: Element, event: Event) => any) | undefined

    onhighlight: ((this: Element, event: Event) => any) | undefined

    onkeydown: ((this: Element, event: KeyboardEvent) => any) | undefined

    onkeypress: ((this: Element, event: KeyboardEvent) => any) | undefined

    onkeyup: ((this: Element, event: KeyboardEvent) => any) | undefined

    onlistbackward: ((this: Element, event: ListScrollEvent) => any) | undefined

    onlistforward: ((this: Element, event: ListScrollEvent) => any) | undefined

    onload: ((this: Element, event: LoadEvent) => any) | undefined

    onmousedown: ((this: Element, event: MouseEvent) => any) | undefined

    onmousemove: ((this: Element, event: MouseEvent) => any) | undefined

    onmouseout: ((this: Element, event: MouseEvent) => any) | undefined

    onmouseover: ((this: Element, event: MouseEvent) => any) | undefined

    onmouseup: ((this: Element, event: MouseEvent) => any) | undefined

    onpagescroll: ((this: Element, event: PageScrollEvent) => any) | undefined

    onreload: ((this: Element, event: Event) => any) | undefined

    onselect: ((this: Element, event: Event) => any) | undefined

    onunhighlight: ((this: Element, event: Event) => any) | undefined

    onunload: ((this: Element, event: Event) => any) | undefined

    onunselect: ((this: Element, event: Event) => any) | undefined

    /** Parent element. If the element has no parent, the value is null. */
    readonly parent: Element | null

    /** Current state of the element. */
    state: ElementState

    /** Text content for this element. Note that the actual element (typically a TextElement or TextAreaElement) that handles the setting or getting of this property may be a descendant: if this element isn't a TextElement or TextAreaElement, the default behavior, if not overridden, is to look for the first element with id=text within the descendants, and, if found, set its text. */
    text: string

    /** Type of the element. The type of an element refers to the type XML attribute specified in the document where the element is declared, not to the JavaScript type of the element object. */
    readonly type: string

    /**
     * eneric read/write property used by some elements for different purposes depending on the actual element type. It typically represents a state variable for the element. For example, a panoramaview element's value is equal to the index of the current page.
     *
     * When getting this property, the value returned is always an integer. When setting this property, the value set may be an integer (when setting a simple value) or a two-element array where the first array element is an integer for the value and the second array element is an integer that may be used as a flags/modifier indicator for specialized purposes by some components (transition animation flags for example).
     */
    value: number

    // Methods
    /** Add an event listener for events emitted by this element. */
    addEventListener<K extends keyof EventMap>(type: K, listener: (this: Element, event: EventMap[K]) => any): void

    /** Trigger the start of animations for this element, if any is defined. */
    animate(trigger: EventName): void

    /** Send an event to the element. Events are typically generated by user action or by the system, but it may sometimes be necessary for an application to synthesize and send events directly.} */
    sendEvent(event: Event): void
  }
}

declare namespace Permissions {
  interface Permissions {
    /**
     * Returns true if the application has been granted the permission, or false if it hasn't.
     *
     * Note that false doesn't necessarily mean than the permission has been explicitly denied by the user. It may be that the permission is not granted because of a combination of other factors, or that that permission was never requested and/or does not exist.
     * @param permissionName Permission name.
     */
    granted(
      permissionName:
        | 'access_activity'
        | 'access_user_profile'
        | 'access_heart_rate'
        | 'access_location'
        | 'access_internet'
        | 'run_background'
    ): boolean
  }
}

declare namespace Sensor {
  /**
   * A sensor measures different physical quantities and provides corresponding sensor readings which are a source of information about the device and its environment.
   * @see https://dev.fitbit.com/build/reference/device-api/sensors/
   * @see https://dev.fitbit.com/guides/sensors/
   */
  interface Sensor {
    /** Flag that indicates if the sensor is activated or not. When a sensor is created, the sensor is not activated, thus the initial value of this property equals false. */
    readonly activated: boolean

    /** Event handler that is called when the sensor is activated. */
    onactivate: ((this: Sensor, event: Event) => any) | undefined

    /** Event handler that is called when an error occurs. When an error occurs, the sensor is automatically stopped, and the activated property equals false. */
    onerror: ((this: Sensor, event: SensorErrorEvent) => any) | undefined

    /** Event handler that is called whenever a new reading is available. */
    onreading: ((this: Sensor, event: Event) => any) | undefined

    /** Start the sensor. This will cause the sensor to start and become activated. */
    start(): void

    /** Stop the sensor. This will cause the sensor to stop and become deactivated. The onreading event handler will no longer be called when the sensor is deactivated. */
    stop(): void
  }

  /** Event that is emitted when an asynchronous error occurs. */
  interface SensorErrorEvent {
    /** Set to true when the default handling was prevented */
    readonly defaultPrevented: boolean

    /** The error that occurred */
    readonly error: Error

    /** Target of the event */
    readonly target: EventTarget | undefined

    /** Type of the event */
    readonly type: string
  }
}

declare namespace UserSettings {
  /** User preferences for the current user. */
  interface Preferences {
    // Properties
    /** Indicates whether clocks and time values should use a 12h (AM/PM) or 24h format */
    readonly clockDisplay: '12h' | '24h'

    /**
     * Indicates what day should be considered the first day of the week.
     *
     * The value is a day index that has the same meaning as the day index returned by the JavaScript function Date.prototype.getDay():
     *
     * 0 for Sunday, 1 for Monday.
     */
    readonly firstDayOfWeek: 0 | 1
  }

  /** Settings related to exercises. */
  interface ExerciseSettings {
    /** Swimming pool length, in meters. */
    readonly poolLength: number
  }

  /** Locale settings are settings that relate to a user's preferred language. */
  interface LocaleSettings {
    /** BCP 47 language tag. */
    readonly language: string
  }

  /**
   * Unit settings indicate the preferred units to use when displaying values that have an associated unit.
   *
   * These unit preferences may be units or families of units. The appropriate unit from a family should be chosen based on the magnitude of the value and its context. For example, short distances with a "metric" unit may be displayed as "m" or "km" depending on the context.
   *
   * - The unit family "us" means the United States Customary System (USCS or USC)
   * - The unit family "metric" means the International System of Units (SI)
   */
  interface UnitsSettings {
    /**
     * Unit family to use for body weight (or, more accurately, body mass).
     * - "metric": typically kilograms
     * - "us": typically pounds
     * - "stone": stones
     */
    readonly bodyWeight: 'metric' | 'us' | 'stone'

    /**
     * Unit family to use for distances.
     * - "metric": typically meters or kilometers
     * - "us": typically feet or miles
     */
    readonly distance: 'metric' | 'us'

    /** Unit family to use for a person's height.
     * - "metric": meters or centimeters
     * - "us": feet and inches
     */
    readonly height: 'metric' | 'us'

    /** Unit family to use for speeds.
     * - "metric": typically kilometers per hour
     * - "us": typically miles per hour
     */
    readonly speed: 'metric' | 'us'

    /** Unit family to use for temperatures.
     * - "C": Celsius scale
     * - "F": Fahrenheit scale
     */
    readonly temperature: 'C' | 'F'

    /** Unit family to use for volumes (volume of liquid for example).
     * - "metric": typically liters
     * - "us": typically fluid ounces
     */
    readonly volume: 'metric' | 'us'

    /** Unit family to use for a weight (or, more accurately, a mass) other than body weight.
     * - "metric": typically kilograms
     * - "us": typically pounds
     */
    readonly weight: 'metric' | 'us'
  }
}

declare module 'accelerometer' {
  export = Accelerometer
}

declare module 'appbit' {
  export = Appbit
}

declare module 'barometer' {
  export = Barometer
}

declare module 'body-presence' {
  export = BodyPresence
}

declare module 'cbor' {
  export = CBOR
}

declare module 'clock' {
  const clock: Clock.Clock
  export = clock
}

declare module 'document' {
  const documentModule: Document.DocumentModule & Document.ElementSearch
  export = documentModule
}

declare module 'permissions' {
  export = Permissions
}

declare module 'sensor' {
  export = Sensor
}

declare module 'user-settings' {
  export const preferences: UserSettings.Preferences
  export const exercise: UserSettings.ExerciseSettings
  export const locale: UserSettings.LocaleSettings
  export const units: UserSettings.UnitsSettings
}
